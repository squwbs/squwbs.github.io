{"version":3,"sources":["components/Header.js","context.js","components/Swiper.js","components/Post.js","components/Posts.js","components/AddPost.js","App.js","serviceWorker.js","index.js"],"names":["require","name","Context","React","createContext","ContextController","_ref","children","_useState","useState","posts","random","_useState2","Object","slicedToArray","state","setState","react_default","a","createElement","Provider","value","styles","StyleSheet","create","container","flex","backgroundColor","sliderContainer","overflow","position","controlsWrapperStyle","alignItems","justifyContent","right","bottom","padding","dotsWrapperStyle","activeDotStyle","width","height","borderRadius","marginLeft","marginRight","marginTop","marginBottom","dotStyle","prevButtonStyle","color","nextButtonStyle","Swiper","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","activeIndex","index","pan","Animated","ValueXY","_animatedValueX","_animatedValueY","_panResponder","PanResponder","onPanResponderTerminationRequest","onMoveShouldSetResponderCapture","onMoveShouldSetPanResponderCapture","e","gestureState","swipingEnabled","onAnimationStart","allow","Math","abs","direction","dx","dy","stopAutoplay","onPanResponderGrant","_fixState","onPanResponderMove","event","x","y","onPanResponderRelease","gesture","correction","moveX","x0","moveY","y0","startAutoplay","actionMinWidth","spring","toValue","start","onAnimationEnd","_changeIndex","_this2","addListener","removeAllListeners","_this3","autoplayTimeout","autoplay","setTimeout","moveUpDown","clearTimeout","down","arguments","length","undefined","setOffset","setValue","_this4","delta","move","skipChanges","calcDelta","loop","count","onIndexChanged","_this5","_event$nativeEvent$la","nativeEvent","layout","_this6","_this$state","_this$props","containerStyle","swipeAreaStyle","swipeWrapperStyle","dotElement","activeDotElement","prevButtonElement","prevButtonText","nextButtonElement","nextButtonText","buttonsEnabled","View","style","onLayout","_onLayout","bind","overRangeButtonsOpacity","Array","isArray","assign","top","left","flexDirection","transform","translateX","translateY","panHandlers","map","el","i","key","opacity","TouchableOpacity","disabled","onPress","Text","Component","defaultProps","Post","post","paddingBottom","fontSize","borderColor","borderWidth","textAlign","Posts","_useContext","useContext","id","components_Post","className","AddPost","_useContext2","addTodo","text","objectSpread","concat","toConsumableArray","TextInput","editable","maxLength","multiline","numberOfLines","onChangeText","onChange","inputType","target","onSubmitEditing","returnKeyType","clearButtonMode","paddingLeft","type","paddingRight","App","components_AddPost","Swiper_Swiper","components_Posts","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac925d6f.chunk.js","sourcesContent":["import React from 'react'; \n//import {WholeContext} from \"../WholeContext\"\nvar {name} =require( '../../package.json')\n\n\n\nfunction Header () {\n  \n    return(\n        <div style={divStyle}>        \n            <p style ={pStyle} >\n                {name}\n            </p>\n        </div>\n    \n    ) \n};\n\nconst divStyle = {\n    flex:1,\n    margin:1,\n    borderColor:'#000000',\n    borderWidth:5,\n    // shadowColor: 'rgba(1, 1, 1, 1)',\n    // shadowOffset: {width: 0, height: 0},\n    // shadowRadius: 20,\n    backgroundColor:'#ffffff',\n    alignItems:'center',\n    justifyContent:'space-evenly',\n    height:22,\n};\n  const pStyle = {\n    color:'black',\n    fontSize: 12,\n    //textAlign: 'center',\n    // textShadowColor: 'rgba(1, 1, 1, 1)',\n    // textShadowOffset: {width: 0, height: 0},\n    // textShadowRadius: 20\n  };\n\n\nexport default (Header)","import React, { useState, useEffect } from \"react\";\n\nexport const Context = React.createContext();\n\n\nexport function ContextController({ children }) {\n  let intialState = {\n    posts: [],\n    random: \"\",\n    \n  };\n\n  const [state, setState] = useState(intialState);\n\n  return (\n    <Context.Provider value={[state, setState]}>{children}</Context.Provider>\n  );\n}","//directly downloaded from \n//https://github.com/oxyii/react-native-web-swiper\n\nimport React from \"react\";\nimport {\n    StyleSheet,\n    View,\n    ViewPropTypes,\n    Text,\n    Animated,\n    PanResponder,\n    TouchableOpacity,\n} from \"react-native\";\nimport PropTypes from \"prop-types\";\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: \"transparent\",\n    },\n    sliderContainer: {\n        backgroundColor: \"transparent\",\n        overflow: \"hidden\",\n        position: \"relative\",\n        flex: 1,\n    },\n    controlsWrapperStyle: {\n        position: \"absolute\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        right: 0,\n        bottom: 0,\n        padding: 10\n    },\n    dotsWrapperStyle: {\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    },\n    activeDotStyle: {\n        backgroundColor: '#007aff',\n        width: 8,\n        height: 8,\n        borderRadius: 4,\n        marginLeft: 3,\n        marginRight: 3,\n        marginTop: 3,\n        marginBottom: 3\n    },\n    dotStyle: {\n        backgroundColor: 'rgba(0,0,0,.2)',\n        width: 8,\n        height: 8,\n        borderRadius: 4,\n        marginLeft: 3,\n        marginRight: 3,\n        marginTop: 3,\n        marginBottom: 3\n    },\n    prevButtonStyle: {\n        color: '#777777'\n    },\n    nextButtonStyle: {\n        color: '#007aff'\n    },\n});\n\nexport default class Swiper extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            width: 0,\n            height: 0,\n            activeIndex: props.index,\n            pan: new Animated.ValueXY(),\n        };\n\n        this._animatedValueX = 0;\n        this._animatedValueY = 0;\n\n        this._panResponder = PanResponder.create({\n            onPanResponderTerminationRequest: () => false,\n            onMoveShouldSetResponderCapture: () => true,\n            onMoveShouldSetPanResponderCapture: (e, gestureState) => {\n                if(!this.props.swipingEnabled)\n                    return false;\n                if(this.props.onAnimationStart)\n                    this.props.onAnimationStart();\n                const allow = Math.abs(this.props.direction === \"row\" ? gestureState.dx : gestureState.dy) > 5;\n                if(allow) this.stopAutoplay();\n                return allow;\n            },\n            onPanResponderGrant: (e, gestureState) => this._fixState(),\n            onPanResponderMove: Animated.event([\n                null, this.props.direction === \"row\" ? {dx: this.state.pan.x} : {dy: this.state.pan.y},\n            ]),\n            onPanResponderRelease: (e, gesture) => {\n                const correction = this.props.direction===\"row\" ? gesture.moveX-gesture.x0 : gesture.moveY-gesture.y0;\n                this.startAutoplay();\n                if(Math.abs(correction) < ((this.props.direction===\"row\" ? this.state.width : this.state.height) * this.props.actionMinWidth))\n                    return Animated.spring(this.state.pan,{toValue:{x:0,y:0}}).start(() => {\n                        if(this.props.onAnimationEnd)\n                            this.props.onAnimationEnd(this.state.activeIndex);\n                    });\n                this._changeIndex(correction>0 ? -1 : 1);\n            }\n        });\n    }\n\n    componentDidMount() {\n        this.state.pan.x.addListener((value) => this._animatedValueX = value.value);\n        this.state.pan.y.addListener((value) => this._animatedValueY = value.value);\n        this.startAutoplay();\n    }\n\n    componentWillUnmount() {\n        this.stopAutoplay();\n        this.state.pan.x.removeAllListeners();\n        this.state.pan.y.removeAllListeners();\n    }\n\n    startAutoplay() {\n        this.stopAutoplay();\n        if(this.props.autoplayTimeout) {\n            this.autoplay = setTimeout(() => {\n                this.moveUpDown(this.props.autoplayTimeout<0)\n            }, Math.abs(this.props.autoplayTimeout)*1000);\n        }\n    }\n\n    stopAutoplay() {\n        this.autoplay && clearTimeout(this.autoplay);\n    }\n\n    moveUpDown(down=false) {\n        this._fixState();\n        if(this.props.onAnimationStart)\n            this.props.onAnimationStart();\n        this._changeIndex(down ? -1 : 1);\n    }\n\n    _fixState() {\n        this._animatedValueX = this.props.direction===\"row\" ? this.state.width*this.state.activeIndex*-1 : 0;\n        this._animatedValueY = this.props.direction===\"row\" ? 0 : this.state.height*this.state.activeIndex*-1;\n        this.state.pan.setOffset({x: this._animatedValueX, y: this._animatedValueY});\n        this.state.pan.setValue({x: 0, y: 0});\n    }\n\n    _changeIndex(delta=1) {\n        let move = {x:0,y:0};\n        let skipChanges = (!delta);\n        let calcDelta = delta;\n        if(this.state.activeIndex<=0 && delta<0) {\n            skipChanges = (!this.props.loop);\n            calcDelta = this.count+delta;\n        } else if(this.state.activeIndex+1>=this.count && delta>0) {\n            skipChanges = (!this.props.loop);\n            calcDelta = -1*this.state.activeIndex+delta-1;\n        }\n        if(skipChanges)\n            return Animated.spring(this.state.pan,{toValue:move}).start(() => {\n                if(this.props.onAnimationEnd)\n                    this.props.onAnimationEnd(this.state.activeIndex);\n            });\n        this.stopAutoplay();\n        let index = this.state.activeIndex+calcDelta;\n        this.setState({activeIndex: index});\n        if(this.props.direction===\"row\")\n            move.x = this.state.width*-1*calcDelta;\n        else\n            move.y = this.state.height*-1*calcDelta;\n        Animated.spring(this.state.pan,{toValue:move}).start(() => {\n            if(this.props.onAnimationEnd)\n                this.props.onAnimationEnd(index);\n        });\n        this.startAutoplay();\n        this.props.onIndexChanged && this.props.onIndexChanged(index);\n    }\n\n    _onLayout(event) {\n        const {width,height} = event.nativeEvent.layout;\n        this.setState({width,height}, () => this._fixState());\n    }\n\n    render() {\n        const {pan,width,height,activeIndex} = this.state;\n        const {\n            direction,\n            containerStyle,\n            swipeAreaStyle,\n            swipeWrapperStyle,\n            controlsWrapperStyle,\n            dotsWrapperStyle,\n            dotElement,\n            dotStyle,\n            activeDotElement,\n            activeDotStyle,\n            prevButtonElement,\n            prevButtonStyle,\n            prevButtonText,\n            nextButtonElement,\n            nextButtonStyle,\n            nextButtonText,\n            loop,\n            buttonsEnabled,\n        } = this.props;\n        if(!width) return (<View style={[styles.container,containerStyle]} onLayout={this._onLayout.bind(this)}/>);\n        const overRangeButtonsOpacity = !loop ? this.props.overRangeButtonsOpacity : this.props.overRangeButtonsOpacity || 1;\n        let {children} = this.props;\n        if(!Array.isArray(children)) children = [children];\n        this.count = children.length;\n        return (\n            <View style={[styles.container,containerStyle]} onLayout={this._onLayout.bind(this)}>\n                <View style={[styles.sliderContainer,swipeAreaStyle]}>\n                    <Animated.View\n                        style={[{\n                            position: \"relative\",\n                            top: 0,\n                            left: 0,\n                        },swipeWrapperStyle,{\n                            flexDirection: direction,\n                            width: direction===\"row\" ? width*this.count : width,\n                            height: direction===\"row\" ? height : height*this.count,\n                        },{transform:[{translateX:pan.x},{translateY:pan.y}]}]}\n                        {...this._panResponder.panHandlers}\n                    >\n                        {children.map((el,i)=>(<View key={i} style={{width,height}}>{el}</View>))}\n                    </Animated.View>\n                    {!buttonsEnabled ? null : (\n                      <View style={[styles.controlsWrapperStyle,{\n                          flexDirection: direction,\n                      }, direction===\"row\" ? {left: 0} : {top: 0}, controlsWrapperStyle]}>\n                          <View style={{opacity:!activeIndex ? overRangeButtonsOpacity : 1}}>\n                              <TouchableOpacity disabled={!activeIndex && !loop} onPress={()=>this.moveUpDown(true)}>\n                                  {prevButtonElement || <Text style={[styles.prevButtonStyle,prevButtonStyle]}>{prevButtonText}</Text>}\n                              </TouchableOpacity>\n                          </View>\n                          <View style={[{flexDirection:direction},styles.dotsWrapperStyle,dotsWrapperStyle]}>\n                              {children.map((el,i)=>(\n                                <View key={i}>\n                                    {i===activeIndex\n                                      ? activeDotElement || <View style={[styles.activeDotStyle,activeDotStyle]} />\n                                      : dotElement || <View style={[styles.dotStyle,dotStyle]} />}\n                                </View>\n                              ))}\n                          </View>\n                          <View style={{opacity:activeIndex+1>=this.count ? overRangeButtonsOpacity : 1}}>\n                              <TouchableOpacity disabled={activeIndex+1>=this.count && !loop} onPress={()=>this.moveUpDown()}>\n                                  {nextButtonElement || <Text style={[styles.nextButtonStyle,nextButtonStyle]}>{nextButtonText}</Text>}\n                              </TouchableOpacity>\n                          </View>\n                      </View>\n                    )}\n                </View>\n            </View>\n        );\n    }\n}\n\nSwiper.propTypes = {\n    direction: PropTypes.oneOf([\"row\",\"column\"]),\n    index: PropTypes.number,\n    onIndexChanged: PropTypes.func,\n    onAnimationStart: PropTypes.func,\n    onAnimationEnd: PropTypes.func,\n    actionMinWidth: PropTypes.number,\n    children: PropTypes.node.isRequired,\n    overRangeButtonsOpacity: PropTypes.number,\n    loop: PropTypes.bool,\n    autoplayTimeout: PropTypes.number,\n    swipingEnabled: PropTypes.bool,\n    buttonsEnabled: PropTypes.bool,\n    containerStyle: ViewPropTypes.style,\n    swipeAreaStyle: ViewPropTypes.style,\n    swipeWrapperStyle: ViewPropTypes.style,\n    controlsWrapperStyle: ViewPropTypes.style,\n    dotsWrapperStyle: ViewPropTypes.style,\n    dotStyle: ViewPropTypes.style,\n    dotElement: PropTypes.element,\n    activeDotStyle: ViewPropTypes.style,\n    activeDotElement: PropTypes.element,\n    prevButtonStyle: Text.propTypes.style,\n    prevButtonElement: PropTypes.element,\n    prevButtonText: PropTypes.string,\n    nextButtonStyle: Text.propTypes.style,\n    nextButtonElement: PropTypes.element,\n    nextButtonText: PropTypes.string,\n};\n\nSwiper.defaultProps = {\n    direction: \"row\",\n    index: 0,\n    actionMinWidth: 0.25,\n    overRangeButtonsOpacity: 0,\n    loop: false,\n    autoplayTimeout: 0,\n    swipingEnabled: true,\n    buttonsEnabled: true,\n    prevButtonText: \"prev\",\n    nextButtonText: \"next\",\n};","import React from 'react';\nimport {View,Text} from 'react-native'\n//import Swiper from 'react-native-swiper'\n//import Swiper from 'react-native-web-swiper'\nimport Swiper from './Swiper'\nconst Post = props => {\n  const { post } = props;\n  return (\n    //<Swiper showsButtons={true}>\n    //<Swiper>\n    <View style={{\n        flex:1,\n        flexDirection:'row'\n    }}>\n       \n            <View style={{\n                        marginTop:2,\n                        marginLeft:2,\n                        //marginRight:2,\n                        //padding:1,\n                        paddingBottom:2,\n                        height:22,\n                        backgroundColor:'#ffffff',\n                        alignItems:'center',\n                        justifyContent:'center',\n                        flexDirection:'row',\n                        flex:1,\n                        fontSize:12,\n                        borderColor:'#cfcfcf',\n                        borderRadius:2,\n                        color:'black',\n                        borderWidth:1,\n                        textAlign:'center',\n                        }}>\n                            \n                <Text>\n                    {post}\n                </Text>\n            </View>\n            <View style={{\n                        marginTop:2,\n                        marginLeft:2,\n                        //marginRight:2,\n                        //padding:1,\n                        paddingBottom:2,\n                        height:22,\n                        width:22,\n                        backgroundColor:'#ffffff',\n                        alignItems:'center',\n                        justifyContent:'center',\n                        flexDirection:'row',\n                        //flex:1,\n                        fontSize:12,\n                        borderColor:'#cfcfcf',\n                        borderRadius:2,\n                        color:'black',\n                        borderWidth:1,\n                        textAlign:'center',\n                        }}>\n                <Text>\n                    O\n                </Text>\n            </View>\n            <View style={{\n                        marginTop:2,\n                        marginLeft:2,\n                        marginRight:2,\n                        //padding:1,\n                        paddingBottom:2,\n                        height:22,\n                        width:22,\n                        backgroundColor:'#ffffff',\n                        alignItems:'center',\n                        justifyContent:'center',\n                        flexDirection:'row',\n                        //flex:1,\n                        fontSize:12,\n                        borderColor:'#cfcfcf',\n                        borderRadius:2,\n                        color:'black',\n                        borderWidth:1,\n                        textAlign:'center',\n                        }}>\n                <Text>\n                    X\n                </Text>\n            </View>\n      \n    </View>\n    //</Swiper>\n  );\n};\n\nexport default Post;","import React, { useContext } from \"react\";\nimport { Context } from \"../context\";\nimport Post from \"./Post\"\nimport {View} from 'react-native'\n\n//import Swiper from 'react-native-swiper'\n//import GestureRecognizer, {swipeDirections} from 'react-native-swipe-gestures'\n// const panRes = PanResponder.create({\n//       onMoveShouldSetPanResponder: (evt, gestureState) => {\n//         // const isFirstScreen = this.state.stack.length === 1\n//         // const isFarLeft = evt.nativeEvent.pageX < Math.floor(width * 0.25);\n  \n//         // if (!isFirstScreen && isFarLeft) {\n//         //   return true;\n//         // }\n//         // return false;\n//       },\n//       onPanResponderMove: (evt, gestureState) => {\n//         // this._animatedValue.setValue(gestureState.moveX);\n//         console.log(evt.target.key)\n//         console.log(gestureState.moveX +\" : \"+gestureState.moveY)\n//       },\n//       onPanResponderTerminationRequest: (evt, gestureState) => true,\n//       onPanResponderRelease: (evt, gestureState) => {\n//         // if (Math.floor(gestureState.moveX) >= width / 2) {\n//         //   this.handlePop();\n//         // } else {\n//         //   Animated.timing(this._animatedValue, {\n//         //     toValue: 0,\n//         //     duration: 250,\n//         //     useNativeDriver: true,\n//         //   }).start();\n//         // }\n//       },\n//       onPanResponderTerminate: (evt, gestureState) => {\n//         // Animated.timing(this._animatedValue, {\n//         //   toValue: 0,\n//         //   duration: 250,\n//         //   useNativeDriver: true,\n//         // }).start();\n//       },\n//     });\n// const gestures = function(){\n//     function onSwipeUp(gestureState) {\n//         //this.setState({myText: 'You swiped up!'});\n//         console.log('up')\n//     }\n     \n//     function onSwipeDown(gestureState) {\n//         //this.setState({myText: 'You swiped down!'});\n//         console.log('down')\n//     }\n    \n//     function onSwipeLeft(gestureState) {\n//         //this.setState({myText: 'You swiped left!'});\n//         console.log('left')\n//     }\n    \n//     function onSwipeRight(gestureState) {\n//         //this.setState({myText: 'You swiped right!'});\n//         console.log('right')\n//     }\n//     function onSwipe(gestureName, gestureState) {\n//         const {SWIPE_UP, SWIPE_DOWN, SWIPE_LEFT, SWIPE_RIGHT} = swipeDirections;\n//         //this.setState({gestureName: gestureName});\n//         switch (gestureName) {\n//           case SWIPE_UP:\n//                 console.log('case up')\n//             //this.setState({backgroundColor: 'red'});\n//             break;\n//           case SWIPE_DOWN:\n//                 console.log('case down')\n//             //this.setState({backgroundColor: 'green'});\n//             break;\n//           case SWIPE_LEFT:\n//                 console.log('case left')\n//             //this.setState({backgroundColor: 'blue'});\n//             break;\n//           case SWIPE_RIGHT:\n//                 console.log('case right')\n//             //this.setState({backgroundColor: 'yellow'});\n//             break;\n//         }\n//       }\n//     const config = {\n//         velocityThreshold: 0.3,\n//         directionalOffsetThreshold: 80\n//       };\n    \n// }\n\nconst Posts = () => {\n  const [state] = useContext(Context);\n  const { posts } = state;\n    var id=0\n    return (\n        // <GestureRecognizer\n        //     onSwipe={(direction, state) => gestures.onSwipe(direction, state)}\n        //     onSwipeUp={(state) => gestures.onSwipeUp(state)}\n        //     onSwipeDown={(state) => gestures.onSwipeDown(state)}\n        //     onSwipeLeft={(state) => gestures.onSwipeLeft(state)}\n        //     onSwipeRight={(state) => gestures.onSwipeRight(state)}\n        //     config={gestures.config} \n        \n        // >\n            <View>\n                {posts.map(post => (\n                //<Post className='post' key={id++} post={post} {...panRes.panHandlers}/>\n                <Post className='post' key={id++} post={post}/>\n                ))}\n            </View>\n        // </GestureRecognizer>\n    );\n  \n};\n\nexport default Posts;","import React, { useState, useEffect, useContext } from \"react\";\nimport { Context } from \"../context\";\nimport {TextInput,View,TouchableOpacity} from \"react-native\"\n\nconst AddPost = () => {\nconst [state, setState] = useContext(Context);\nconst[userInput,setUserInput,Refs] = useState(\"\")\n//const [userInput, setUserInput] = useState(\"\");\n//const [trackTitle, setTrackTitle] = useState(\"\");\n//const [posts] =useState(\"\")\n\n// useEffect(() => {\n// //     axios\n// //       .get(\n// //         `https://cors-anywhere.herokuapp.com/http://api.musixmatch.com/ws/1.1/track.search?q_track=${trackTitle}&page_size=10&page=1&s_track_rating=desc&apikey=${\n// //           process.env.REACT_APP_MM_KEY\n// //         }`\n// //       )\n// //       .then(res => {\n// //         let track_list = res.data.message.body.track_list;\n// //         setState({ track_list: track_list, heading: \"Search Results\" });\n// //       })\n// //       .catch(err => console.log(err));\n// //   }, [trackTitle]\n// // this.refs.addPost.value=\"\"\n//     },[state.posts]\n// );\n\n\n    const addTodo = () => {\n    //e.preventDefault();\n    //setTrackTitle(userInput);\n    if(state.text==\"\"){\n        //console.log('stop')\n    }\n    else{\n        setState({...state,posts:[...state.posts,state.text],text:\"\"})\n    }\n    //console.log(state)\n    //console.log(Refs)\n    //document.getElementById('addPost').value=''\n  \n  };\n\n\n  const onChange = (e) => {\n    //e.preventDefault()\n    //setUserInput(e.target.value)\n    //console.log()\n    \n    //setState({...state,userInput:e.target.value})\n    //console.log(e.nativeEvent.inputType)\n    \n        if(e.nativeEvent.inputType=='insertLineBreak'){\n            addTodo()\n            //console.log('we should be here')\n            //setState({...state,posts:[...state.posts,state.text],text:\"\"})\n        }\n        else if(e.nativeEvent.inputType=='insertText'){\n            \n            setState({...state,text:e.target.value})\n        }\n    \n\n    \n  };\n\n  return (\n    // eslint-disable-next-line no-use-before-define\n    <View style={{marginTop:1,borderColor:'transparent',borderWidth:1,flexDirection:'row',flex:1}}>\n      {/* <form onSubmit={addTodo}  style={{\n              margin:1,\n              borderColor:'#cfcfcf',\n              borderWidth:1,\n              alignItems:'center',\n              flexDirection:'column',\n              flex:1,\n              \n              // shadowColor: 'rgba(1, 1, 1, 1)',\n              // shadowOffset: {width: 0, height: 0},\n              // shadowRadius: 1,\n              color:'black',\n              // textShadowColor: 'rgba(1, 1, 1, 1)',\n              // textShadowOffset: {width: 0, height: 0},\n              // textShadowRadius: 5\n            }}> */}\n        \n          {/* <input\n            id=\"addPost\"\n            type=\"text\"\n            className=\"form-control form-control-lg\"\n            placeholder=\"type todo...\"\n            name=\"userInput\"\n            value={state.text}\n            onChange={onChange}\n          /> */}\n        <TextInput \n            editable = {true}\n            maxLength = {40}\n            multiline = {false}\n            numberOfLines = {1}\n            onChangeText={(text) => setState({...state,text:text})}\n            value={state.text}\n            onChange={onChange}\n            onSubmitEditing={addTodo}\n            returnKeyType='search'\n            clearButtonMode=\"while-editing\"\n            style={{\n              marginLeft:1,\n              paddingLeft:3,\n              borderColor:'#cfcfcf',\n              borderWidth:1,\n              alignItems:'center',\n              flexDirection:'row',\n              flex:1,\n              //width:1,\n              // shadowColor: 'rgba(1, 1, 1, 1)',\n              // shadowOffset: {width: 0, height: 0},\n              // shadowRadius: 1,\n              color:'black',\n              paddingBottom:2,\n              // textShadowColor: 'rgba(1, 1, 1, 1)',\n              // textShadowOffset: {width: 0, height: 0},\n              // textShadowRadius: 5\n            }}\n          />\n        \n        {/* <button className=\"button\" type=\"submit\">\n          add\n        </button> */}\n        <TouchableOpacity \n           \n            type=\"submit\" \n            style={{\n                height:22,\n                width:22,\n                backgroundColor:'#ffffff',\n                alignItems:'center',\n                justifyContent:'center',\n                marginLeft:2,\n                marginRight:1,\n                borderColor:'#cfcfcf',\n                borderWidth:1,\n                paddingLeft:2,\n                paddingRight:2,\n                //flex:1,\n                //shadowColor: 'rgba(1, 1, 1, 1)',\n                //shadowOffset: {width: 0, height: 0},\n                //shadowRadius: 20\n                }}\n            onPress={addTodo}>\n          <a style={{\n              color:'black',\n              fontSize:12,\n              paddingBottom:2,\n              //textShadowColor: 'rgba(1, 1, 1, 1)',\n              //textShadowOffset: {width: 0, height: 0},\n              //textShadowRadius: 20,\n            }}>\n                +\n            </a>\n        </TouchableOpacity>\n      {/* </form> */}\n    </View>\n  );\n};\n\nexport default AddPost;","import React,{Component,Context,useContext} from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header'\nimport Home from './components/Home'\nimport Posts from './components/Posts'\nimport AddPost from './components/AddPost'\nimport Swiper from './components/Swiper'\nimport {FlatList} from 'react'\nimport {ContextController} from './context'\nimport {View,Text} from 'react-native'\n\nclass App extends Component {\n  render(){\n    return(\n      <ContextController>\n\n        <AddPost/>\n        <View style={{flex: 1,\n            height:100\n          }}>\n            <Swiper loop={true} autoplayTimeout = '5'>\n                <View style={{\n                  flex: 1,\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  backgroundColor: \"rgba(20,20,20,0.3)\"\n                  }}>\n                    <Text>Slide 1</Text>\n                </View>\n                <View style={{\n                  flex: 1,\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  backgroundColor: \"rgba(110,110,110,0.3)\"\n                }}>\n                    <Text>Slide 2</Text>\n                </View>\n                <View style={{\n                  flex: 1,\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  backgroundColor: \"rgba(200,200,200,0.3)\"\n                }}>\n                    <Text>Slide 3</Text>\n                </View>\n            </Swiper>\n        </View>\n        <Posts/>\n      </ContextController>\n    )\n  }\n}\n\nconst appStyle = {\n  flex:1,\n  margin:0,\n  borderColor:'#000000',\n  //borderWidth:5,\n  // shadowColor: 'rgba(1, 1, 1, 1)',\n  // shadowOffset: {width: 0, height: 0},\n  // shadowRadius: 20,\n  backgroundColor:'#ffffff',\n  alignItems:'center',\n  justifyContent:'space-evenly',\n  height:22,\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}