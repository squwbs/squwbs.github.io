{"version":3,"sources":["components/Header.js","context.js","components/Post.js","components/Posts.js","components/AddPost.js","App.js","serviceWorker.js","index.js"],"names":["require","name","Context","React","createContext","ContextController","_ref","children","_useState","useState","posts","random","_useState2","Object","slicedToArray","state","setState","react_default","a","createElement","Provider","value","Post","props","post","View","style","margin","padding","height","backgroundColor","alignItems","justifyContent","flexDirection","flex","fontSize","borderColor","borderRadius","color","borderWidth","textAlign","Posts","_useContext","useContext","id","className","map","components_Post","key","AddPost","_useContext2","TextInput","editable","maxLength","multiline","numberOfLines","onChangeText","text","objectSpread","onChange","e","target","TouchableOpacity","type","onPress","preventDefault","concat","toConsumableArray","console","log","paddingBottom","App","components_Posts","components_AddPost","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"k1BAEYA,EAAS,IAAhBC,KAgBL,YChBaC,EAAUC,IAAMC,gBAGtB,SAASC,EAATC,GAAyC,IAAZC,EAAYD,EAAZC,SAAYC,EAOpBC,mBANR,CAChBC,MAAO,GACPC,OAAQ,KAHoCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,GAOvCO,EAPuCH,EAAA,GAOhCI,EAPgCJ,EAAA,GAS9C,OACEK,EAAAC,EAAAC,cAACjB,EAAQkB,SAAT,CAAkBC,MAAO,CAACN,EAAOC,IAAYT,eCalCe,EA1BF,SAAAC,GAAS,IACZC,EAASD,EAATC,KACR,OACEP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,MAAO,CACDC,OAAO,EACPC,QAAQ,EACRC,OAAO,GACPC,gBAAgB,UAChBC,WAAW,SACXC,eAAe,SACfC,cAAc,MACdC,KAAK,EACLC,SAAS,GACTC,YAAY,UACZC,aAAa,EACbC,MAAM,QACNC,YAAY,EACZC,UAAU,WAElBvB,EAAAC,EAAAC,cAAA,WACKK,KCJEiB,EAdD,WAAM,IAAAC,EACFC,qBAAWzC,GACnBQ,EAFUG,OAAAC,EAAA,EAAAD,CAAA6B,EAAA,MAEVhC,MACFkC,EAAG,EACP,OACI3B,EAAAC,EAAAC,cAAA,OAAK0B,UAAU,OACZnC,EAAMoC,IAAI,SAAAtB,GAAI,OACbP,EAAAC,EAAAC,cAAC4B,EAAD,CAAMC,IAAKJ,IAAMpB,KAAMA,wCC6IpByB,EApJC,WAAM,IAAAP,EACIC,qBAAWzC,GADfgD,EAAArC,OAAAC,EAAA,EAAAD,CAAA6B,EAAA,GACf3B,EADemC,EAAA,GACRlC,EADQkC,EAAA,GAAA1C,EAEeC,mBAAS,IAFxBG,EAAAC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,GAAAI,EAAA,GAAAA,EAAA,GAAAA,EAAA,GA4CpB,OACEK,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,MAAO,CACTC,OAAO,EACPS,YAAY,UACZG,YAAY,EACZN,cAAc,MACdC,KAAK,IAoCLjB,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CACIC,UAAY,EACZC,UAAa,GACbC,WAAa,EACbC,cAAiB,EACjBC,aAAc,SAACC,GAAD,OAAUzC,EAASH,OAAA6C,EAAA,EAAA7C,CAAA,GAAIE,EAAL,CAAW0C,KAAKA,MAChDpC,MAAON,EAAM0C,KACbE,SAzDO,SAACC,GAIhB5C,EAASH,OAAA6C,EAAA,EAAA7C,CAAA,GAAIE,EAAL,CAAW0C,KAAKG,EAAEC,OAAOxC,UAuDzBK,MAAO,CACLC,OAAO,EACPS,YAAY,UACZG,YAAY,EACZR,WAAW,SACXE,cAAc,MACdC,KAAK,EAKLI,MAAM,WAUZrB,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CACIjB,UAAU,SACVkB,KAAK,SACLrC,MAAO,CACHG,OAAO,GACPC,gBAAgB,UAChBC,WAAW,SACXC,eAAe,SACfL,OAAO,EACPS,YAAY,UACZG,YAAY,GAKhByB,QA1GQ,SAAAJ,GAChBA,EAAEK,iBAEFjD,EAASH,OAAA6C,EAAA,EAAA7C,CAAA,GAAIE,EAAL,CAAWL,MAAK,GAAAwD,OAAArD,OAAAsD,EAAA,EAAAtD,CAAKE,EAAML,OAAX,CAAiBK,EAAM0C,OAAMA,KAAK,MAC1DW,QAAQC,IAAItD,KAuGNE,EAAAC,EAAAC,cAAA,KAAGO,MAAO,CACNY,MAAM,QACNH,SAAS,GACTmC,cAAc,IAHlB,UCtGKC,mLAtBX,OACEtD,EAAAC,EAAAC,cAACd,EAAD,KACEY,EAAAC,EAAAC,cAACqD,EAAD,MACAvD,EAAAC,EAAAC,cAACsD,EAAD,cALUC,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a3dcae82.chunk.js","sourcesContent":["import React from 'react'; \n//import {WholeContext} from \"../WholeContext\"\nvar {name} =require( '../../package.json')\n\n\n\nfunction Header () {\n  \n    return(\n        <div style={divStyle}>        \n            <p style ={pStyle} >\n                {name}\n            </p>\n        </div>\n    \n    ) \n};\n\nconst divStyle = {\n    flex:1,\n    margin:1,\n    borderColor:'#000000',\n    borderWidth:5,\n    // shadowColor: 'rgba(1, 1, 1, 1)',\n    // shadowOffset: {width: 0, height: 0},\n    // shadowRadius: 20,\n    backgroundColor:'#ffffff',\n    alignItems:'center',\n    justifyContent:'space-evenly',\n    height:22,\n};\n  const pStyle = {\n    color:'black',\n    fontSize: 12,\n    //textAlign: 'center',\n    // textShadowColor: 'rgba(1, 1, 1, 1)',\n    // textShadowOffset: {width: 0, height: 0},\n    // textShadowRadius: 20\n  };\n\n\nexport default (Header)","import React, { useState, useEffect } from \"react\";\n\nexport const Context = React.createContext();\n\n\nexport function ContextController({ children }) {\n  let intialState = {\n    posts: [],\n    random: \"\",\n    \n  };\n\n  const [state, setState] = useState(intialState);\n\n  return (\n    <Context.Provider value={[state, setState]}>{children}</Context.Provider>\n  );\n}","import React from 'react';\nimport {View} from 'react-native'\nconst Post = props => {\n  const { post } = props;\n  return (\n    <View style={{\n                margin:2,\n                padding:1,\n                height:22,\n                backgroundColor:'#ffffff',\n                alignItems:'center',\n                justifyContent:'center',\n                flexDirection:'row',\n                flex:1,\n                fontSize:12,\n                borderColor:'#cfcfcf',\n                borderRadius:2,\n                color:'black',\n                borderWidth:1,\n                textAlign:'center'\n                }}>\n        <div>\n            {post}\n        </div>\n    </View>\n  );\n};\n\nexport default Post;","import React, { useContext } from \"react\";\nimport { Context } from \"../context\";\nimport Post from \"./Post\"\n\nconst Posts = () => {\n  const [state] = useContext(Context);\n  const { posts } = state;\n    var id=0\n    return (\n        <div className=\"row\">\n          {posts.map(post => (\n            <Post key={id++} post={post} />\n          ))}\n        </div>\n    );\n  \n};\n\nexport default Posts;","import React, { useState, useEffect, useContext } from \"react\";\nimport { Context } from \"../context\";\nimport {TextInput,View,TouchableOpacity} from \"react-native\"\n\nconst AddPost = () => {\nconst [state, setState] = useContext(Context);\nconst[userInput,setUserInput,Refs] = useState(\"\")\n//const [userInput, setUserInput] = useState(\"\");\n//const [trackTitle, setTrackTitle] = useState(\"\");\n//const [posts] =useState(\"\")\n\n// useEffect(() => {\n// //     axios\n// //       .get(\n// //         `https://cors-anywhere.herokuapp.com/http://api.musixmatch.com/ws/1.1/track.search?q_track=${trackTitle}&page_size=10&page=1&s_track_rating=desc&apikey=${\n// //           process.env.REACT_APP_MM_KEY\n// //         }`\n// //       )\n// //       .then(res => {\n// //         let track_list = res.data.message.body.track_list;\n// //         setState({ track_list: track_list, heading: \"Search Results\" });\n// //       })\n// //       .catch(err => console.log(err));\n// //   }, [trackTitle]\n// // this.refs.addPost.value=\"\"\n//     },[state.posts]\n// );\n\n\n    const addTodo = e => {\n    e.preventDefault();\n    //setTrackTitle(userInput);\n    setState({...state,posts:[...state.posts,state.text],text:\"\"})\n    console.log(state)\n    //console.log(Refs)\n    //document.getElementById('addPost').value=''\n  \n  };\n\n\n  const onChange = (e) => {\n    //e.preventDefault()\n    //setUserInput(e.target.value)\n    //console.log()\n    setState({...state,text:e.target.value})\n    //setState({...state,userInput:e.target.value})\n  };\n\n  return (\n    <View style={{\n        margin:1,\n        borderColor:'#cfcfcf',\n        borderWidth:1,\n        flexDirection:'row',\n        flex:1,\n        \n        // shadowColor: 'rgba(1, 1, 1, 1)',\n        // shadowOffset: {width: 0, height: 0},\n        // shadowRadius: 1,\n        //color:'black',\n        // textShadowColor: 'rgba(1, 1, 1, 1)',\n        // textShadowOffset: {width: 0, height: 0},\n        // textShadowRadius: 5\n      }}>\n      {/* <form onSubmit={addTodo}  style={{\n              margin:1,\n              borderColor:'#cfcfcf',\n              borderWidth:1,\n              alignItems:'center',\n              flexDirection:'column',\n              flex:1,\n              \n              // shadowColor: 'rgba(1, 1, 1, 1)',\n              // shadowOffset: {width: 0, height: 0},\n              // shadowRadius: 1,\n              color:'black',\n              // textShadowColor: 'rgba(1, 1, 1, 1)',\n              // textShadowOffset: {width: 0, height: 0},\n              // textShadowRadius: 5\n            }}> */}\n        \n          {/* <input\n            id=\"addPost\"\n            type=\"text\"\n            className=\"form-control form-control-lg\"\n            placeholder=\"type todo...\"\n            name=\"userInput\"\n            value={state.text}\n            onChange={onChange}\n          /> */}\n        <TextInput \n            editable = {true}\n            maxLength = {40}\n            multiline = {true}\n            numberOfLines = {1}\n            onChangeText={(text) => setState({...state,text:text})}\n            value={state.text}\n            onChange={onChange}\n            \n            style={{\n              margin:1,\n              borderColor:'#cfcfcf',\n              borderWidth:1,\n              alignItems:'center',\n              flexDirection:'row',\n              flex:1,\n              \n              // shadowColor: 'rgba(1, 1, 1, 1)',\n              // shadowOffset: {width: 0, height: 0},\n              // shadowRadius: 1,\n              color:'black',\n              // textShadowColor: 'rgba(1, 1, 1, 1)',\n              // textShadowOffset: {width: 0, height: 0},\n              // textShadowRadius: 5\n            }}\n          />\n        \n        {/* <button className=\"button\" type=\"submit\">\n          add\n        </button> */}\n        <TouchableOpacity \n            className=\"button\" \n            type=\"submit\" \n            style={{\n                height:22,\n                backgroundColor:'#ffffff',\n                alignItems:'center',\n                justifyContent:'center',\n                margin:1,\n                borderColor:'#cfcfcf',\n                borderWidth:1,\n                //shadowColor: 'rgba(1, 1, 1, 1)',\n                //shadowOffset: {width: 0, height: 0},\n                //shadowRadius: 20\n                }}\n            onPress={addTodo}>\n          <a style={{\n              color:'black',\n              fontSize:12,\n              paddingBottom:2,\n              //textShadowColor: 'rgba(1, 1, 1, 1)',\n              //textShadowOffset: {width: 0, height: 0},\n              //textShadowRadius: 20,\n            }}>\n                add\n            </a>\n        </TouchableOpacity>\n      {/* </form> */}\n    </View>\n  );\n};\n\nexport default AddPost;","import React,{Component,Context,useContext} from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header'\nimport Home from './components/Home'\nimport Posts from './components/Posts'\nimport AddPost from './components/AddPost'\nimport {FlatList} from 'react'\nimport {ContextController} from './context'\n\nclass App extends Component {\n  render(){\n    return(\n      <ContextController>\n        <Posts/>\n        <AddPost/>\n      </ContextController>\n    )\n  }\n}\n\nconst appStyle = {\n  flex:1,\n  margin:0,\n  borderColor:'#000000',\n  //borderWidth:5,\n  // shadowColor: 'rgba(1, 1, 1, 1)',\n  // shadowOffset: {width: 0, height: 0},\n  // shadowRadius: 20,\n  backgroundColor:'#ffffff',\n  alignItems:'center',\n  justifyContent:'space-evenly',\n  height:22,\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}